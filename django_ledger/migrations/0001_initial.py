# pylint: skip-file
# Generated by Django 3.2.5 on 2021-07-25 21:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_ledger.io.io_mixin
import django_ledger.models.entity
import re
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=10, verbose_name='Account Code')),
                ('name', models.CharField(max_length=100, verbose_name='Account Name')),
                ('role', models.CharField(choices=[('Assets', (
                ('asset_ca_cash', 'Current Asset'), ('asset_ca_mkt_sec', 'Marketable Securities'),
                ('asset_ca_recv', 'Receivables'), ('asset_ca_inv', 'Inventory'), ('asset_ca_uncoll', 'Uncollectibles'),
                ('asset_ca_prepaid', 'Prepaid'), ('asset_ca_other', 'Other Liquid Assets'),
                ('asset_lti_notes', 'Notes Receivable'), ('asset_lti_land', 'Land'), ('asset_lti_sec', 'Securities'),
                ('asset_ppe', 'Property Plant & Equipment'), ('asset_ia', 'Intangible Assets'),
                ('asset_adjustment', 'Other Assets'))), ('Liabilities', (
                ('lia_cl_acc_pay', 'Accounts Payable'), ('lia_cl_wage_pay', 'Wages Payable'),
                ('lia_cl_wage_pay', 'Interest Payable'), ('lia_cl_st_notes_payable', 'Notes Payable'),
                ('lia_cl_ltd_mat', 'Current Maturities of Long Tern Debt'), ('lia_cl_def_rev', 'Deferred Revenue'),
                ('lia_cl_other', 'Other Liabilities'), ('lia_ltl_notes', 'Notes Payable'),
                ('lia_ltl_bonds', 'Bonds Payable'), ('lia_ltl_mortgage', 'Mortgage Payable'))), ('Equity', (
                ('eq_capital', 'Capital'), ('eq_stock_c', 'Common Stock'), ('eq_stock_p', 'Preferred Stock'),
                ('eq_adjustment', 'Other Equity Adjustments'), ('in_sales', 'Sales Income'),
                ('in_pass', 'Passive Income'), ('in_other', 'Other Income'), ('ex_cogs', 'Cost of Goods Sold'),
                ('ex_op', 'Operational Expense'), ('ex_interest', 'Interest Expense'), ('ex_taxes', 'Tax Expense'),
                ('ex_cap', 'Capital Expense'), ('ex_other', 'Other Expense')))], max_length=25,
                                          verbose_name='Account Role')),
                ('balance_type', models.CharField(choices=[('credit', 'Credit'), ('debit', 'Debit')], max_length=6,
                                                  verbose_name='Account Balance Type')),
                ('locked', models.BooleanField(default=False, verbose_name='Locked')),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'ordering': ['-created'],
                'abstract': False,
            },
            managers=[
                ('on_coa', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='BillModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('terms', models.CharField(
                    choices=[('on_receipt', 'Due On Receipt'), ('net_30', 'Net 30 Days'), ('net_60', 'Net 60 Days'),
                             ('net_90', 'Net 90 Days')], default='on_receipt', max_length=10, verbose_name='Terms')),
                ('amount_due',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Due')),
                ('amount_paid',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Paid')),
                ('amount_receivable',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Receivable')),
                ('amount_unearned',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Unearned')),
                ('amount_earned',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Earned')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid')),
                ('paid_date', models.DateField(blank=True, null=True, verbose_name='Paid Date')),
                ('date', models.DateField(verbose_name='Date')),
                ('due_date', models.DateField(verbose_name='Due Date')),
                ('void', models.BooleanField(default=False, verbose_name='Void')),
                ('void_date', models.DateField(blank=True, null=True, verbose_name='Void Date')),
                ('accrue', models.BooleanField(default=False, verbose_name='Progressible')),
                ('progress', models.DecimalField(decimal_places=2, default=0, max_digits=3,
                                                 validators=[django.core.validators.MinValueValidator(limit_value=0),
                                                             django.core.validators.MaxValueValidator(limit_value=1)],
                                                 verbose_name='Progress Amount')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bill_number', models.SlugField(max_length=20, unique=True, verbose_name='Bill Number')),
                ('xref', models.SlugField(blank=True, null=True, verbose_name='External Reference Number')),
                ('additional_info', models.JSONField(default=dict, verbose_name='Bill Additional Info')),
            ],
            options={
                'verbose_name': 'Bill',
                'verbose_name_plural': 'Bills',
                'ordering': ['-updated'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('address_1', models.CharField(max_length=70, verbose_name='Address Line 1')),
                ('address_2', models.CharField(blank=True, max_length=70, null=True, verbose_name='Address Line 2')),
                ('city', models.CharField(blank=True, max_length=70, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=70, null=True, verbose_name='State/Province')),
                ('zip_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Zip Code')),
                ('country', models.CharField(blank=True, max_length=70, null=True, verbose_name='Country')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Phone Number')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('customer_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('hidden', models.BooleanField(default=False)),
                ('additional_info', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Customer',
            },
        ),
        migrations.CreateModel(
            name='EntityManagementModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permission_level', models.CharField(
                    choices=[('read', 'Read Permissions'), ('write', 'Read/Write Permissions'),
                             ('suspended', 'No Permissions')], default='read', max_length=10,
                    verbose_name='Permission Level')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntityModel',
            fields=[
                ('slug', models.SlugField(unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('address_1', models.CharField(max_length=70, verbose_name='Address Line 1')),
                ('address_2', models.CharField(blank=True, max_length=70, null=True, verbose_name='Address Line 2')),
                ('city', models.CharField(blank=True, max_length=70, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=70, null=True, verbose_name='State/Province')),
                ('zip_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Zip Code')),
                ('country', models.CharField(blank=True, max_length=70, null=True, verbose_name='Country')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Phone Number')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Entity Name')),
                ('hidden', models.BooleanField(default=False)),
                ('fy_start_month', models.IntegerField(
                    choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'),
                             (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'),
                             (12, 'December')], default=1, verbose_name='Fiscal Year Start')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_of',
                                            to=settings.AUTH_USER_MODEL, verbose_name='Admin')),
                ('managers',
                 models.ManyToManyField(related_name='managed_by', through='django_ledger.EntityManagementModel',
                                        to=settings.AUTH_USER_MODEL, verbose_name='Managers')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             related_name='children_set', to='django_ledger.entitymodel')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'ordering': ['-created'],
                'abstract': False,
            },
            bases=(models.Model, django_ledger.io.io_mixin.IOMixIn, django_ledger.models.entity.EntityReportManager),
        ),
        migrations.CreateModel(
            name='EntityUnitModel',
            fields=[
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField()),
                ('active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('entity',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.entitymodel',
                                   verbose_name='Unit Entity')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             related_name='children_set', to='django_ledger.entityunitmodel')),
            ],
            options={
                'verbose_name': 'Entity Unit Model',
                'ordering': ['-created'],
                'abstract': False,
            },
            bases=(django_ledger.io.io_mixin.IOMixIn, models.Model),
        ),
        migrations.CreateModel(
            name='ImportJobModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=200, verbose_name='Description')),
                ('completed', models.BooleanField(default=False, verbose_name='Import Job Completed')),
            ],
            options={
                'verbose_name': 'Import Job Model',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvoiceModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('terms', models.CharField(
                    choices=[('on_receipt', 'Due On Receipt'), ('net_30', 'Net 30 Days'), ('net_60', 'Net 60 Days'),
                             ('net_90', 'Net 90 Days')], default='on_receipt', max_length=10, verbose_name='Terms')),
                ('amount_due',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Due')),
                ('amount_paid',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Paid')),
                ('amount_receivable',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Receivable')),
                ('amount_unearned',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Unearned')),
                ('amount_earned',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount Earned')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid')),
                ('paid_date', models.DateField(blank=True, null=True, verbose_name='Paid Date')),
                ('date', models.DateField(verbose_name='Date')),
                ('due_date', models.DateField(verbose_name='Due Date')),
                ('void', models.BooleanField(default=False, verbose_name='Void')),
                ('void_date', models.DateField(blank=True, null=True, verbose_name='Void Date')),
                ('accrue', models.BooleanField(default=False, verbose_name='Progressible')),
                ('progress', models.DecimalField(decimal_places=2, default=0, max_digits=3,
                                                 validators=[django.core.validators.MinValueValidator(limit_value=0),
                                                             django.core.validators.MaxValueValidator(limit_value=1)],
                                                 verbose_name='Progress Amount')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.SlugField(max_length=20, unique=True, verbose_name='Invoice Number')),
                ('additional_info', models.JSONField(default=dict, verbose_name='Invoice Additional Info')),
                ('cash_account',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoice_cash_account',
                                   to='django_ledger.accountmodel', verbose_name='Cash Account')),
                ('customer',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='django_ledger.customermodel',
                                   verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-updated'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Item Name')),
                ('sku', models.CharField(blank=True, max_length=50, null=True, verbose_name='SKU Code')),
                ('upc', models.CharField(blank=True, max_length=50, null=True, verbose_name='UPC Code')),
                ('item_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Internal ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('default_amount', models.DecimalField(decimal_places=2, default=0, max_digits=20,
                                                       validators=[django.core.validators.MinValueValidator(0)],
                                                       verbose_name='Default monetary value per unit of measure')),
                ('for_inventory', models.BooleanField(help_text='It is an item you require for your inventory.',
                                                      verbose_name='Is an item for inventory')),
                ('is_product_or_service',
                 models.BooleanField(help_text='Is a product or service you sell or provide to customers.',
                                     verbose_name='Is a product or service.')),
                ('additional_info', models.JSONField(default=dict, verbose_name='Item Additional Info')),
                ('cogs_account', models.ForeignKey(blank=True,
                                                   help_text='COGS account where cost will be recognized on Income Statement.',
                                                   null=True, on_delete=django.db.models.deletion.PROTECT,
                                                   related_name='item_cogs_account', to='django_ledger.accountmodel',
                                                   verbose_name='COGS Account')),
                ('earnings_account', models.ForeignKey(blank=True,
                                                       help_text='Earnings account where revenue will be recognized on Income Statement.',
                                                       null=True, on_delete=django.db.models.deletion.PROTECT,
                                                       related_name='item_earnings_account',
                                                       to='django_ledger.accountmodel',
                                                       verbose_name='Earnings Account')),
                ('entity',
                 models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='items',
                                   to='django_ledger.entitymodel', verbose_name='Item Entity')),
                ('expense_account', models.ForeignKey(blank=True,
                                                      help_text='Expense account where cost will be recognized on Income Statement.',
                                                      null=True, on_delete=django.db.models.deletion.PROTECT,
                                                      related_name='item_expense_account',
                                                      to='django_ledger.accountmodel', verbose_name='Expense Account')),
                ('inventory_account',
                 models.ForeignKey(blank=True, help_text='Inventory account where cost will be capitalized.', null=True,
                                   on_delete=django.db.models.deletion.PROTECT, related_name='item_inventory_account',
                                   to='django_ledger.accountmodel', verbose_name='Inventory Account')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemThroughModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('po_item_status', models.CharField(blank=True,
                                                    choices=[('not_ordered', 'Not Ordered'), ('ordered', 'Ordered'),
                                                             ('in_transit', 'In Transit'), ('received', 'Received'),
                                                             ('cancelled', 'Canceled')], max_length=15, null=True,
                                                    verbose_name='PO Item Status')),
                ('quantity', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0)],
                                               verbose_name='Quantity')),
                ('unit_cost', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0)],
                                                verbose_name='Cost Per Unit')),
                ('total_amount', models.DecimalField(decimal_places=2, editable=False, max_digits=20,
                                                     validators=[django.core.validators.MinValueValidator(0)],
                                                     verbose_name='Total Amount QTY x UnitCost')),
                ('bill_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                 to='django_ledger.billmodel', verbose_name='Bill Model')),
                ('entity_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  to='django_ledger.entityunitmodel',
                                                  verbose_name='Associated Entity Unit')),
                ('invoice_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                    to='django_ledger.invoicemodel', verbose_name='Invoice Model')),
                ('item_model',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='django_ledger.itemmodel',
                                   verbose_name='Item Model')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             related_name='children_set', to='django_ledger.itemthroughmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JournalEntryModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Date')),
                ('description', models.CharField(blank=True, max_length=70, null=True, verbose_name='Description')),
                ('activity', models.CharField(
                    choices=[('op', 'Operating'), ('fin', 'Financing'), ('inv', 'Investing'), ('other', 'Other')],
                    max_length=5, verbose_name='Activity')),
                ('origin', models.CharField(blank=True, max_length=30, null=True, verbose_name='Origin')),
                ('posted', models.BooleanField(default=False, verbose_name='Posted')),
                ('locked', models.BooleanField(default=False, verbose_name='Locked')),
                ('entity_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                  to='django_ledger.entityunitmodel',
                                                  verbose_name='Associated Entity Unit')),
            ],
            options={
                'verbose_name': 'Journal Entry',
                'verbose_name_plural': 'Journal Entries',
                'ordering': ['-created'],
                'abstract': False,
            },
            managers=[
                ('on_coa', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='VendorModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('address_1', models.CharField(max_length=70, verbose_name='Address Line 1')),
                ('address_2', models.CharField(blank=True, max_length=70, null=True, verbose_name='Address Line 2')),
                ('city', models.CharField(blank=True, max_length=70, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=70, null=True, verbose_name='State/Province')),
                ('zip_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Zip Code')),
                ('country', models.CharField(blank=True, max_length=70, null=True, verbose_name='Country')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Phone Number')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vendor_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('hidden', models.BooleanField(default=False)),
                ('additional_info', models.JSONField(blank=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors',
                                             to='django_ledger.entitymodel', verbose_name='Vendor Entity')),
            ],
            options={
                'verbose_name': 'Vendor',
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasureModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Unit of Measure Name')),
                ('unit_abbr', models.SlugField(max_length=10, verbose_name='UoM Abbreviation')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('entity', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE,
                                             to='django_ledger.entitymodel', verbose_name='UoM Entity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransactionModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tx_type', models.CharField(choices=[('credit', 'Credit'), ('debit', 'Debit')], max_length=10,
                                             verbose_name='Tx Type')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Account of the transaction.',
                                               max_digits=20, null=True,
                                               validators=[django.core.validators.MinValueValidator(0)],
                                               verbose_name='Amount')),
                ('description',
                 models.CharField(blank=True, help_text='A description to be included with this individual transaction',
                                  max_length=100, null=True, verbose_name='Tx Description')),
                ('account',
                 models.ForeignKey(help_text='Account from Chart of Accounts to be associated with this transaction.',
                                   on_delete=django.db.models.deletion.CASCADE, related_name='txs',
                                   to='django_ledger.accountmodel', verbose_name='Account')),
                ('journal_entry', models.ForeignKey(help_text='Journal Entry to be associated with this transaction.',
                                                    on_delete=django.db.models.deletion.CASCADE, related_name='txs',
                                                    to='django_ledger.journalentrymodel',
                                                    verbose_name='Journal Entry')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StagedTransactionModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fitid', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('date_posted', models.DateField()),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('memo', models.CharField(blank=True, max_length=200, null=True)),
                ('earnings_account',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   to='django_ledger.accountmodel')),
                ('import_job',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.importjobmodel')),
                ('tx', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            to='django_ledger.transactionmodel')),
            ],
            options={
                'verbose_name': 'Staged Transaction Model',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('markdown_notes', models.TextField(blank=True, null=True, verbose_name='Markdown Notes')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('po_number', models.SlugField(max_length=20, unique=True, verbose_name='Purchase Order Number')),
                ('po_date', models.DateField(verbose_name='Purchase Order Date')),
                ('po_title', models.CharField(max_length=250, verbose_name='Purchase Order Title')),
                ('po_status',
                 models.CharField(choices=[('draft', 'Draft'), ('in_review', 'In Review'), ('approved', 'Approved')],
                                  default='draft', max_length=10)),
                ('po_amount',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Purchase Order Amount')),
                ('po_amount_received',
                 models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Received Amount')),
                ('fulfilled', models.BooleanField(default=False, verbose_name='Is Fulfilled')),
                ('fulfillment_date', models.DateField(blank=True, null=True, verbose_name='Fulfillment Date')),
                ('entity',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.entitymodel',
                                   verbose_name='Entity')),
                ('po_items',
                 models.ManyToManyField(through='django_ledger.ItemThroughModel', to='django_ledger.ItemModel',
                                        verbose_name='Purchase Order Items')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LedgerModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ledger Name')),
                ('posted', models.BooleanField(default=False, verbose_name='Posted Ledger')),
                ('locked', models.BooleanField(default=False, verbose_name='Locked Ledger')),
                ('hidden', models.BooleanField(default=False, verbose_name='Hidden Ledger')),
                ('entity',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.entitymodel',
                                   verbose_name='Ledger Entity')),
            ],
            options={
                'verbose_name': 'Ledger',
                'verbose_name_plural': 'Ledgers',
                'ordering': ['-created'],
                'abstract': False,
            },
            bases=(models.Model, django_ledger.io.io_mixin.IOMixIn),
        ),
        migrations.AddField(
            model_name='journalentrymodel',
            name='ledger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries',
                                    to='django_ledger.ledgermodel', verbose_name='Ledger'),
        ),
        migrations.AddField(
            model_name='journalentrymodel',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='children', to='django_ledger.journalentrymodel',
                                    verbose_name='Parent Journal Entry'),
        ),
        migrations.AddField(
            model_name='itemthroughmodel',
            name='po_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='django_ledger.purchaseordermodel', verbose_name='Purchase Order Model'),
        ),
        migrations.AddField(
            model_name='itemmodel',
            name='uom',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='django_ledger.unitofmeasuremodel',
                                    verbose_name='Unit of Measure'),
        ),
        migrations.AddField(
            model_name='invoicemodel',
            name='invoice_items',
            field=models.ManyToManyField(through='django_ledger.ItemThroughModel', to='django_ledger.ItemModel',
                                         verbose_name='Invoice Items'),
        ),
        migrations.AddField(
            model_name='invoicemodel',
            name='ledger',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.ledgermodel',
                                       verbose_name='Ledger'),
        ),
        migrations.AddField(
            model_name='invoicemodel',
            name='prepaid_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoice_prepaid_account',
                                    to='django_ledger.accountmodel', verbose_name='Prepaid Account'),
        ),
        migrations.AddField(
            model_name='invoicemodel',
            name='unearned_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                                    related_name='invoice_unearned_account', to='django_ledger.accountmodel',
                                    verbose_name='Unearned Account'),
        ),
        migrations.AddField(
            model_name='importjobmodel',
            name='ledger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.ledgermodel',
                                    verbose_name='Ledger'),
        ),
        migrations.AddField(
            model_name='entitymanagementmodel',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_permissions',
                                    to='django_ledger.entitymodel', verbose_name='Entity'),
        ),
        migrations.AddField(
            model_name='entitymanagementmodel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_permissions',
                                    to=settings.AUTH_USER_MODEL, verbose_name='Manager'),
        ),
        migrations.AddField(
            model_name='customermodel',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers',
                                    to='django_ledger.entitymodel', verbose_name='Customer Entity'),
        ),
        migrations.CreateModel(
            name='ChartOfAccountModel',
            fields=[
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('locked', models.BooleanField(default=False, verbose_name='Locked')),
                ('description', models.TextField(blank=True, null=True, verbose_name='CoA Description')),
                ('entity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coa',
                                                to='django_ledger.entitymodel', verbose_name='Entity')),
            ],
            options={
                'verbose_name': 'Chart of Account',
                'verbose_name_plural': 'Chart of Accounts',
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='billmodel',
            name='bill_items',
            field=models.ManyToManyField(through='django_ledger.ItemThroughModel', to='django_ledger.ItemModel',
                                         verbose_name='Bill Items'),
        ),
        migrations.AddField(
            model_name='billmodel',
            name='cash_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='None_cash_account', to='django_ledger.accountmodel',
                                    verbose_name='Cash Account'),
        ),
        migrations.AddField(
            model_name='billmodel',
            name='ledger',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.ledgermodel',
                                       verbose_name='Ledger'),
        ),
        migrations.AddField(
            model_name='billmodel',
            name='prepaid_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='None_prepaid_account', to='django_ledger.accountmodel',
                                    verbose_name='Prepaid Account'),
        ),
        migrations.AddField(
            model_name='billmodel',
            name='unearned_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='None_unearned_account', to='django_ledger.accountmodel',
                                    verbose_name='Unearned Account'),
        ),
        migrations.AddField(
            model_name='billmodel',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.vendormodel',
                                    verbose_name='Vendor'),
        ),
        migrations.CreateModel(
            name='BankAccountModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('account_number', models.CharField(blank=True, max_length=30, null=True, validators=[
                    django.core.validators.RegexValidator(re.compile('^\\d+(?:\\d+)*\\Z'), code='invalid',
                                                          message='Only digits allowed')])),
                ('routing_number', models.CharField(blank=True, max_length=30, null=True, validators=[
                    django.core.validators.RegexValidator(re.compile('^\\d+(?:\\d+)*\\Z'), code='invalid',
                                                          message='Only digits allowed')])),
                ('aba_number', models.CharField(blank=True, max_length=30, null=True)),
                ('account_type', models.CharField(
                    choices=[('checking', 'Checking'), ('savings', 'Savings'), ('money_mkt', 'Money Market')],
                    max_length=10)),
                ('active', models.BooleanField(default=True)),
                ('hidden', models.BooleanField(default=False)),
                ('cash_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   related_name='bank_cash_account', to='django_ledger.accountmodel',
                                                   verbose_name='Cash Account')),
                ('ledger',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='django_ledger.ledgermodel',
                                      verbose_name='Ledger')),
            ],
            options={
                'verbose_name': 'Bank Account',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='accountmodel',
            name='coa',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts',
                                    to='django_ledger.chartofaccountmodel', verbose_name='Chart of Accounts'),
        ),
        migrations.AddField(
            model_name='accountmodel',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='children_set', to='django_ledger.accountmodel'),
        ),
        migrations.AddIndex(
            model_name='vendormodel',
            index=models.Index(fields=['created'], name='django_ledg_created_6a5d9d_idx'),
        ),
        migrations.AddIndex(
            model_name='vendormodel',
            index=models.Index(fields=['updated'], name='django_ledg_updated_736f82_idx'),
        ),
        migrations.AddIndex(
            model_name='vendormodel',
            index=models.Index(fields=['active'], name='django_ledg_active_25e3b1_idx'),
        ),
        migrations.AddIndex(
            model_name='vendormodel',
            index=models.Index(fields=['hidden'], name='django_ledg_hidden_379b0a_idx'),
        ),
        migrations.AddIndex(
            model_name='unitofmeasuremodel',
            index=models.Index(fields=['entity'], name='django_ledg_entity__1c8986_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unitofmeasuremodel',
            unique_together={('entity', 'unit_abbr')},
        ),
        migrations.AddIndex(
            model_name='transactionmodel',
            index=models.Index(fields=['tx_type'], name='django_ledg_tx_type_da7ba9_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionmodel',
            index=models.Index(fields=['account'], name='django_ledg_account_c4bb7e_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionmodel',
            index=models.Index(fields=['journal_entry'], name='django_ledg_journal_46c77f_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionmodel',
            index=models.Index(fields=['created'], name='django_ledg_created_b74538_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionmodel',
            index=models.Index(fields=['updated'], name='django_ledg_updated_494252_idx'),
        ),
        migrations.AddIndex(
            model_name='stagedtransactionmodel',
            index=models.Index(fields=['import_job'], name='django_ledg_import__8e6511_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgermodel',
            index=models.Index(fields=['entity'], name='django_ledg_entity__e21c5d_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgermodel',
            index=models.Index(fields=['entity', 'posted'], name='django_ledg_entity__040422_idx'),
        ),
        migrations.AddIndex(
            model_name='ledgermodel',
            index=models.Index(fields=['entity', 'locked'], name='django_ledg_entity__cde962_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentrymodel',
            index=models.Index(fields=['date'], name='django_ledg_date_470aff_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentrymodel',
            index=models.Index(fields=['activity'], name='django_ledg_activit_bae3bb_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentrymodel',
            index=models.Index(fields=['parent'], name='django_ledg_parent__3418ab_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentrymodel',
            index=models.Index(fields=['entity_unit'], name='django_ledg_entity__557f42_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentrymodel',
            index=models.Index(fields=['ledger', 'posted'], name='django_ledg_ledger__847a3f_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentrymodel',
            index=models.Index(fields=['locked'], name='django_ledg_locked_5cc524_idx'),
        ),
        migrations.AddIndex(
            model_name='itemthroughmodel',
            index=models.Index(fields=['bill_model', 'item_model'], name='django_ledg_bill_mo_39a1ab_idx'),
        ),
        migrations.AddIndex(
            model_name='itemthroughmodel',
            index=models.Index(fields=['invoice_model', 'item_model'], name='django_ledg_invoice_2e4032_idx'),
        ),
        migrations.AddIndex(
            model_name='itemthroughmodel',
            index=models.Index(fields=['po_model', 'item_model'], name='django_ledg_po_mode_c56929_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['inventory_account'], name='django_ledg_invento_dbf206_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['cogs_account'], name='django_ledg_cogs_ac_82d441_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['earnings_account'], name='django_ledg_earning_229a60_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['expense_account'], name='django_ledg_expense_f65128_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['for_inventory'], name='django_ledg_for_inv_c93303_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['is_product_or_service'], name='django_ledg_is_prod_4b9941_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['is_active'], name='django_ledg_is_acti_ffc9c6_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['entity', 'sku'], name='django_ledg_entity__1960a7_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['entity', 'upc'], name='django_ledg_entity__66c7d9_idx'),
        ),
        migrations.AddIndex(
            model_name='itemmodel',
            index=models.Index(fields=['entity', 'item_id'], name='django_ledg_entity__2c3073_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicemodel',
            index=models.Index(fields=['cash_account'], name='django_ledg_cash_ac_00d697_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicemodel',
            index=models.Index(fields=['prepaid_account'], name='django_ledg_prepaid_470f67_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicemodel',
            index=models.Index(fields=['unearned_account'], name='django_ledg_unearne_bc18fd_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicemodel',
            index=models.Index(fields=['date'], name='django_ledg_date_10498b_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicemodel',
            index=models.Index(fields=['due_date'], name='django_ledg_due_dat_5ac804_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicemodel',
            index=models.Index(fields=['paid'], name='django_ledg_paid_3e7887_idx'),
        ),
        migrations.AddIndex(
            model_name='importjobmodel',
            index=models.Index(fields=['ledger'], name='django_ledg_ledger__1e8758_idx'),
        ),
        migrations.AddIndex(
            model_name='entityunitmodel',
            index=models.Index(fields=['active'], name='django_ledg_active_2c2caa_idx'),
        ),
        migrations.AddIndex(
            model_name='entityunitmodel',
            index=models.Index(fields=['hidden'], name='django_ledg_hidden_a01d42_idx'),
        ),
        migrations.AddIndex(
            model_name='entityunitmodel',
            index=models.Index(fields=['entity'], name='django_ledg_entity__0bdfdc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='entityunitmodel',
            unique_together={('entity', 'slug')},
        ),
        migrations.AddIndex(
            model_name='entitymodel',
            index=models.Index(fields=['admin'], name='django_ledg_admin_i_09f5c9_idx'),
        ),
        migrations.AddIndex(
            model_name='entitymodel',
            index=models.Index(fields=['parent'], name='django_ledg_parent__0c1f50_idx'),
        ),
        migrations.AddIndex(
            model_name='entitymanagementmodel',
            index=models.Index(fields=['entity', 'user'], name='django_ledg_entity__9541e6_idx'),
        ),
        migrations.AddIndex(
            model_name='entitymanagementmodel',
            index=models.Index(fields=['user', 'entity'], name='django_ledg_user_id_b7497b_idx'),
        ),
        migrations.AddIndex(
            model_name='customermodel',
            index=models.Index(fields=['created'], name='django_ledg_created_ba7f4c_idx'),
        ),
        migrations.AddIndex(
            model_name='customermodel',
            index=models.Index(fields=['updated'], name='django_ledg_updated_f9ac90_idx'),
        ),
        migrations.AddIndex(
            model_name='customermodel',
            index=models.Index(fields=['active'], name='django_ledg_active_967a81_idx'),
        ),
        migrations.AddIndex(
            model_name='customermodel',
            index=models.Index(fields=['hidden'], name='django_ledg_hidden_dda722_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccountmodel',
            index=models.Index(fields=['entity'], name='django_ledg_entity__48d6e0_idx'),
        ),
        migrations.AddIndex(
            model_name='billmodel',
            index=models.Index(fields=['cash_account'], name='django_ledg_cash_ac_82021a_idx'),
        ),
        migrations.AddIndex(
            model_name='billmodel',
            index=models.Index(fields=['prepaid_account'], name='django_ledg_prepaid_5230e5_idx'),
        ),
        migrations.AddIndex(
            model_name='billmodel',
            index=models.Index(fields=['unearned_account'], name='django_ledg_unearne_806444_idx'),
        ),
        migrations.AddIndex(
            model_name='billmodel',
            index=models.Index(fields=['date'], name='django_ledg_date_6ab9b4_idx'),
        ),
        migrations.AddIndex(
            model_name='billmodel',
            index=models.Index(fields=['due_date'], name='django_ledg_due_dat_6b961b_idx'),
        ),
        migrations.AddIndex(
            model_name='billmodel',
            index=models.Index(fields=['paid'], name='django_ledg_paid_d74dbd_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccountmodel',
            index=models.Index(fields=['ledger'], name='django_ledg_ledger__a7773b_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccountmodel',
            index=models.Index(fields=['account_type'], name='django_ledg_account_009a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccountmodel',
            index=models.Index(fields=['cash_account', 'account_type'], name='django_ledg_cash_ac_2b8b2b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bankaccountmodel',
            unique_together={('cash_account', 'account_number', 'routing_number')},
        ),
        migrations.AddIndex(
            model_name='accountmodel',
            index=models.Index(fields=['role'], name='django_ledg_role_812d08_idx'),
        ),
        migrations.AddIndex(
            model_name='accountmodel',
            index=models.Index(fields=['balance_type'], name='django_ledg_balance_daddac_idx'),
        ),
        migrations.AddIndex(
            model_name='accountmodel',
            index=models.Index(fields=['active'], name='django_ledg_active_f8adc2_idx'),
        ),
        migrations.AddIndex(
            model_name='accountmodel',
            index=models.Index(fields=['coa'], name='django_ledg_coa_id_b60916_idx'),
        ),
        migrations.AddIndex(
            model_name='accountmodel',
            index=models.Index(fields=['role', 'balance_type', 'active'], name='django_ledg_role_1bff96_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='accountmodel',
            unique_together={('coa', 'code')},
        ),
    ]
