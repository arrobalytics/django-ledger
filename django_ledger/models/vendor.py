"""
Django Ledger created by Miguel Sanda <msanda@arrobalytics.com>.
CopyrightÂ© EDMA Group Inc licensed under the GPLv3 Agreement.

Contributions to this module:
Miguel Sanda <msanda@arrobalytics.com>
Pranav P Tulshyan <pranav.tulshyan@gmail.com>
"""

from uuid import uuid4

from django.db import models
from django.db.models import Q
from django.utils.translation import gettext_lazy as _

from django_ledger.models.mixins import ContactInfoMixIn, CreateUpdateMixIn


"""

Vendors (also called Suppliers or Creditors or Payables) refer to the entities from whom goods or services are procured.
It's important that we have a master record of all the Vendors from who we purchase our goods or services.
This models stores details of the suppliers of your business (i.e your entity)
 

"""

class VendorModelManager(models.Manager):

    """
    This model Manager will be used as interface through which the database query operations can be provided to the Vendor Model.

    The "for_entity" method will ensure that a particular entity is able to view only their respective vendors.

    """

    def for_entity(self, entity_slug: str, user_model):

        """
        This method accepts entity_slug and the user model as its parameters.

        @params: entity_slug: the unique slug is generated by the entity model for each entity created.

        @params: user_model: checks for the authorized user , present in the user model

        return: Query Set which filters the vendor model for records which belong to particular entity and with authorised user

        """

        
        qs = self.get_queryset()
        return qs.filter(
            Q(entity__slug__exact=entity_slug) &
            Q(active=True) &
            (
                    Q(entity__admin=user_model) |
                    Q(entity__managers__in=[user_model])
            )
        )


class VendorModel(ContactInfoMixIn, CreateUpdateMixIn):

    """
    This is the main database of the VendorModel , and it contains the fields/columns/attributes which the said Vendor table
    will have.

    In addition to the attributes mentioned below, it also has the the fields/columns/attributes mentioned in the
    ContactInfoMixin & the CreateUpdateMixIn. Read about these mixin here.

    Below are the fields specific to the vendor model.

    @uuid : this is a unique primary key generated for the table. the default value of this fields is set as the
    unique uuid generated.

    @vendor_name: This is the Legal Name of the Vendor. the maximum length for Name of the Vendor allowed is 100

    @entity : A Foreign Key. The values for this columns needs to be chosen from the list of entities which is discussed
    at length in the entity models.

    @description: Mention about the Entity, usually the Address of the Vendor and Bill addresses are mentioned in this
    field

    @active: For each vendor, there shall be flag, which shall determine whether the vendor is active . Purchases can
    be received only from the Venor whose Status has been changed as "Active".

    @additional_info: This is an JSON field which may contain anytime now sir.

    @objects: This object has been created for the purpose of the managing the models and in turn handling the database

    Some Meta Information: (Additional data points regarding this model that may alter its behavior)

    @verbose_name: A human readable name for this Model (Also translatable to other languages with django translation> gettext_lazy)

    @indexes : Index created on different attributes for better db & search queries

    @unique_together: the concantanation of entity & vendor name would remain unique throughout the model i.e database

    """

    uuid = models.UUIDField(default=uuid4, editable=False, primary_key=True)
    vendor_name = models.CharField(max_length=100)
    entity = models.ForeignKey('django_ledger.EntityModel',
                               on_delete=models.CASCADE,
                               verbose_name=_('Vendor Entity'),
                               related_name='vendors')
    description = models.TextField()
    active = models.BooleanField(default=True)
    hidden = models.BooleanField(default=False)

    additional_info = models.JSONField(null=True, blank=True)

    objects = VendorModelManager()

    class Meta:
        verbose_name = _('Vendor')
        indexes = [
            models.Index(fields=['created']),
            models.Index(fields=['updated']),
            models.Index(fields=['active']),
            models.Index(fields=['hidden']),
        ]
        unique_together = [
            ('entity', 'vendor_name')
        ]

    def __str__(self):

        """
        The vendor Model class, represented as a string would look something like (For Vendor with name ABC Pvt Ltd:)

        Vendor: ABC Pvt Ltd.

        """

        return f'Vendor: {self.vendor_name}'
